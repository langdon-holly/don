(fn 'cell-val
  " (fn 'label-ok
      " ( " { (fn 'this-env
                " (fn 'new-env
                    " (fn 'var-key
                        " (fn 'expr?
                            " ((okp expr? )
                                " expr?
                                " (new-env var-key )
                                env )
                            (this-env var-key )))))
              'parse-prog-expr
              (q
                (fn 'str
                  " (fn 'parsed
                      " (okp parsed
                          " (ok
                              (fn 'new-env
                                " (unok parsed
                                    (fn 'var-key
                                      " (= var-key 'source-data
                                          "(ok (q str ))
                                          "(new-env var-key )
                                          env )))))
                          "(err (unerr parsed 'file ))
                          env )
                      (parse-prog str ))))
              'label (q label )
              'error
              (q (fn 'err "(call/onerr continue err )))
              'make-sync-cont
              (q
                (fn 'on-err-cont
                  " (fn 'fun
                      " (fn 'channel
                          " (false
                              (async
                                " (label
                                    'next-state
                                    " (fn 'state
                                        " (continue
                                            (cdr channel )
                                            (make-cont
                                              on-err-cont
                                              (fn 'msg
                                                "(next-state (state msg ))))))
                                    fun ))
                              (car channel ))
                          make-channel ))))
              'make-cell
              (q
                (fn 'val
                  " (fn 'cell
                      "(false (async "(continue (car cell )val ))cell )
                      make-channel )))
              'cell-val (q cell-val )
              'set
              (q
                (fn 'cell
                  " (fn 'val
                      " (false
                          (call/cc (continue (cdr cell )))
                          (async "(continue (car cell )val ))))))
              'cas
              (q
                (fn 'cell
                  " (fn 'old-val
                      " (fn 'new-val
                          " (fn 'val
                              " (= val old-val
                                  " (false
                                      (async
                                        " (continue
                                            (car cell )
                                            new-val ))
                                      val )
                                  " (false
                                      (async
                                        " (continue
                                            (car cell )
                                            val ))
                                      new-val )
                                  env )
                              (call/cc (continue (cdr cell ))))))))
              'length
              (q
                (label
                  'length
                  " (fn 'list
                      " ((= list [] )
                          "0
                          "(+ 1 (length (cdr list )))
                          env ))))
              '->list
              (q
                (fn 'fun
                  " (fn 'len
                      " (label 'do-them
                          " (fn 'idx
                              " (< idx len
                                  "(cons (fun idx )(do-them (+ idx 1 )))
                                  "[]
                                  env ))
                          0 ))))}
          (fn 'var-key "(= var-key 'label (q label-ok )env var-key )))

      (ok
        (fn 'dyn-env
          " (fn 'name
              " (fn 'body
                  " (fn 'cell
                      " (fn 'val
                          "(false (async "(continue (car cell )val ))val )
                          (body
                            (fn 'var-key
                              " (= var-key name
                                  "(ok (q (cell-val cell )))
                                  "(dyn-env var-key )
                                  env ))))
                      make-channel ))))))
  (fn 'cell
    " (fn 'val
        "(false (async "(continue (car cell )val ))val )
        (call/cc (continue (cdr cell ))))))
